openapi: 3.0.0
info:
  title: User Management API
  description: "API for managing users, authentication, authorization, and profiles."
  version: 1.0.0


paths:
  /users/{userId}:
    get:
      tags:
      - Users
      summary: Get user profile
      parameters:
      - name: userId
        in: path
        description: Unique ID of the user
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: User profile retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200'
        "404":
          description: User not found
    put:
      tags:
      - Users
      summary: Update user profile
      parameters:
      - name: userId
        in: path
        description: Unique ID of the user
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/users_userId_body'
        required: true
      responses:
        "200":
          description: User profile updated successfully
        "400":
          description: Invalid input
        "404":
          description: User not found
    delete:
      tags:
      - Users
      summary: Delete user
      parameters:
      - name: userId
        in: path
        description: Unique ID of the user
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "204":
          description: User deleted successfully
        "404":
          description: User not found
  /users/{userId}/bookings:
    get:
      tags:
      - Bookings
      summary: List all bookings for a user
      parameters:
      - name: userId
        in: path
        description: Unique ID of the user
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: List of bookings retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/inline_response_200_1'
        "404":
          description: User not found
    post:
      tags:
      - Bookings
      summary: Create a new booking for a user
      parameters:
      - name: userId
        in: path
        description: Unique ID of the user
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/userId_bookings_body'
        required: true
      responses:
        "201":
          description: Booking created successfully
        "400":
          description: Invalid input
        "404":
          description: User not found
  /users/{userId}/courses:
    get:
      tags:
      - Courses
      summary: List all courses for a user
      parameters:
      - name: userId
        in: path
        description: Unique ID of the user
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: List of courses retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/inline_response_200_2'
        "404":
          description: User not found
    post:
      tags:
      - Courses
      summary: Add a course to a user
      parameters:
      - name: userId
        in: path
        description: Unique ID of the user
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/userId_courses_body'
        required: true
      responses:
        "201":
          description: Course added successfully
        "400":
          description: Invalid input
        "404":
          description: User not found
components:
  schemas:
    users_userId_body:
      type: object
      properties:
        name:
          type: string
        surname:
          type: string
        faculty:
          type: string
    inline_response_200_1:
      type: object
      properties:
        room:
          type: string
        start_time:
          type: string
          format: date-time
        end_time:
          type: string
          format: date-time
        booker_id:
          type: string
    inline_response_200:
      type: object
      properties:
        name:
          type: string
        surname:
          type: string
        email:
          type: string
        role:
          type: string
        faculty:
          type: string
        is_tutor:
          type: boolean
        is_lecturer:
          type: boolean
    inline_response_200_2:
      type: object
      properties:
        course_code:
          type: string
        lecturer_email:
          type: string
    userId_bookings_body:
      type: object
      properties:
        room:
          type: string
        start_time:
          type: string
          format: date-time
        end_time:
          type: string
          format: date-time
    userId_courses_body:
      type: object
      properties:
        course_code:
          type: string
        lecturer_email:
          type: string
  securitySchemes:
    firebaseAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
